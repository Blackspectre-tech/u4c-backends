# =========================================
# Smart Contract (Solidity) - ProjectDonation.sol
# =========================================

pragma solidity ^0.8.0;

contract ProjectDonation {
    struct Project {
        address organization;
        uint goal;
        uint totalDonated;
        bool completed;
    }

    struct Donation {
        address donor;
        uint amount;
        uint timestamp;
    }

    Project[] public projects;
    mapping(uint => Donation[]) public projectDonations;
    event DonationMade(uint projectId, address donor, uint amount);

    function createProject(uint goal) external returns (uint) {
        Project memory newProject = Project(msg.sender, goal, 0, false);
        projects.push(newProject);
        return projects.length - 1;
    }

    function donate(uint projectId) external payable {
        require(projectId < projects.length, "Project does not exist");
        Project storage project = projects[projectId];
        require(!project.completed, "Project already completed");
        project.totalDonated += msg.value;
        projectDonations[projectId].push(Donation(msg.sender, msg.value, block.timestamp));
        if (project.totalDonated >= project.goal) {
            project.completed = true;
        }
        emit DonationMade(projectId, msg.sender, msg.value);
    }

    function getDonations(uint projectId) external view returns (Donation[] memory) {
        return projectDonations[projectId];
    }

    function getProjectCount() external view returns (uint) {
        return projects.length;
    }
}

# =========================================
# Backend (Django DRF + Web3.py) - Summary
# =========================================

# We will:
# 1. Create a Django project with DRF
# 2. Create custom User model with two roles: Donor and Organization
# 3. Integrate Polygon interaction using web3.py
# 4. Track donation/project creation
# 5. Sync with the smart contract

# =========================================
# models.py (with detailed comments)
# =========================================

from django.db import models
from django.contrib.auth.models import AbstractUser

# ------------------------------
# Custom User model with roles
# ------------------------------
class User(AbstractUser):
    # Add a role field to distinguish between donors and organizations
    ROLE_CHOICES = (
        ('donor', 'Donor'),
        ('organization', 'Organization'),
    )
    role = models.CharField(max_length=20, choices=ROLE_CHOICES)

    # Optional field to store the user's Polygon wallet address
    wallet_address = models.CharField(max_length=100, blank=True, null=True, unique=True)

    def __str__(self):
        return f"{self.username} ({self.role})"


# ------------------------------
# Project Model
# ------------------------------
class Project(models.Model):
    # The organization that created this project (ForeignKey to User with role='organization')
    organization = models.ForeignKey(User, on_delete=models.CASCADE, related_name='projects')

    # Title or name of the project
    title = models.CharField(max_length=255)

    # Description to explain the goal of the project
    description = models.TextField()

    # Target amount in Wei (smallest MATIC unit, 1 ether = 10^18 wei)
    goal_amount = models.DecimalField(max_digits=30, decimal_places=0)

    # Amount raised so far (also in Wei)
    total_donated = models.DecimalField(max_digits=30, decimal_places=0, default=0)

    # Boolean to indicate if the project is completed (goal met)
    is_completed = models.BooleanField(default=False)

    # The index ID of this project in the smart contract (to sync donations)
    blockchain_project_id = models.IntegerField(null=True, blank=True)

    # Timestamp fields
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.title


# ------------------------------
# Donation Model
# ------------------------------
class Donation(models.Model):
    # The user (donor) who made the donation
    donor = models.ForeignKey(User, on_delete=models.CASCADE, related_name='donations')

    # The project to which the donation was made
    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='donations')

    # Amount donated (in Wei)
    amount = models.DecimalField(max_digits=30, decimal_places=0)

    # Hash of the blockchain transaction (to verify on PolygonScan)
    transaction_hash = models.CharField(max_length=255)

    # Timestamp of when the donation was made
    donated_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.donor.username} donated {self.amount} to {self.project.title}"

# This completes the models needed for users, projects, and donations with on-chain syncing.
# Let me know if you'd like to proceed with the serializers.py next.
